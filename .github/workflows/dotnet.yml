# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET + SonarCloud

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Begin SonarCloud Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet-sonarscanner begin /k:"TheTrumpetist27_ArticleSummaryBackend" /o:"thetrumpetist27" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="coverage/coverage.cobertura.xml"

    - name: Restore dependencies
      run: dotnet restore ./ArticleSummaryBackend.sln

    - name: Build
      run: dotnet build ./ArticleSummaryBackend.sln --no-restore

    - name: Test with coverage
      run: dotnet test ./ArticleSummaryBackend.sln --no-build --collect:"XPlat Code Coverage"

    - name: Check coverage output
      run: |
        echo "Bestanden in TestResults:"
        find . -type d -name TestResults
        find . -type f -name coverage.cobertura.xml
        echo "Eerste 20 regels:"
        head -n 20 $(find . -type f -name coverage.cobertura.xml)

    - name: Convert coverage to Cobertura
      run: |
        reportgenerator -reports:**/coverage.cobertura.xml -targetdir:coverage -reporttypes:Cobertura

    - name: End SonarCloud Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
